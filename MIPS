.data
    prompt_op:   .asciiz "\nIngrese una opcion: "
    menu:        .asciiz "\n\n-----Registro de ingreso de una empresa-----\n\n\n------------- MENU -------------\n\n\u27a4 [1] Registrar los ingresos de los ultimos 2 meses de la empresa.\n\u27a4 [2] Calcular el promedio de los ingresos.\n\u27a4 [3] Calcular el crecimiento.\n\u27a4 [4] Terminar\n**\n"
    ingreso_mes: .asciiz "Digite los ingresos del mes "
    ing_result:  .asciiz "\nIngresos de los últimos 2 meses:\n"
    prompt_pause:.asciiz "\n\u27a4 Presione enter para continuar...\n"
    promedio_msg:.asciiz "El promedio de los ingresos es: "
    crec_msg:    .asciiz "\nCrecimiento del mes "
    end_msg:     .asciiz "\n*Gracias por utilizar*\n"

    .align 3              # Alineación a 8 bytes
    ingresos: .space 16   # Espacio para 2 ingresos (double)
    nuevo_linea:  .asciiz "\n"
    mes_num:   .word 1

.text
    .globl main

main:
    # Limpiar pantalla
    li $v0, 4              
    la $a0, menu           
    syscall                # Mostrar menú
    
menu_loop:
    li $v0, 4
    la $a0, prompt_op
    syscall                # Mostrar "Ingrese una opción"
    
    li $v0, 5              # Leer opción
    syscall
    move $t0, $v0          # Guardar opción en $t0
    
    # Opción 1: Registrar ingresos
    li $t1, 1              # Comparar con opción 1
    beq $t0, $t1, ingresar_ingresos
    
    # Opción 2: Calcular promedio
    li $t1, 2
    beq $t0, $t1, calcular_promedio
    
    # Opción 3: Calcular crecimiento
    li $t1, 3
    beq $t0, $t1, calcular_crecimiento
    
    # Opción 4: Terminar
    li $t1, 4
    beq $t0, $t1, terminar

    # Si no es válida, volver al menú
    j menu_loop

# Función para ingresar datos
ingresar_ingresos:
    li $t1, 0              # Índice para iterar ingresos
    
    la $a0, ingreso_mes     # Mensaje "Digite los ingresos del mes"
    li $v0, 4
    syscall
    
    # Leer ingreso para el mes 1
    li $v0, 7              # Leer double
    syscall
    s.d $f0, ingresos($t1)  # Guardar ingreso en array
    addi $t1, $t1, 8        # Incrementar el índice (double = 8 bytes)
    
    # Leer ingreso para el mes 2
    la $a0, ingreso_mes     # Mensaje "Digite los ingresos del mes"
    li $v0, 4
    syscall
    li $v0, 7              # Leer double
    syscall
    s.d $f0, ingresos($t1)  # Guardar ingreso en array
    
    # Mostrar ingresos ingresados
    la $a0, ing_result
    li $v0, 4
    syscall
    
    li $t1, 0
    l.d $f12, ingresos($t1)
    li $v0, 3              # Imprimir double
    syscall
    
    addi $t1, $t1, 8
    l.d $f12, ingresos($t1)
    li $v0, 3              # Imprimir double
    syscall
    
    # Pausar
    j pause

# Función para calcular el promedio
calcular_promedio:
    # Cargar los ingresos
    li $t1, 0
    l.d $f0, ingresos($t1)   # Cargar ingreso 1 en $f0
    addi $t1, $t1, 8
    l.d $f2, ingresos($t1)   # Cargar ingreso 2 en $f2
    
    # Calcular suma
    add.d $f4, $f0, $f2      # $f4 = $f0 + $f2
    
    # Calcular promedio (suma / 2)
    li $t2, 2                # Usamos un registro entero
    mtc1 $t2, $f6            # Movemos el valor 2 al registro flotante $f6
    cvt.d.w $f6, $f6         # Convertir entero a double
    div.d $f8, $f4, $f6      # $f8 = promedio
    
    # Mostrar resultado
    la $a0, promedio_msg
    li $v0, 4
    syscall
    
    mov.d $f12, $f8
    li $v0, 3               # Imprimir double
    syscall
    
    j pause

# Función para calcular crecimiento
calcular_crecimiento:
    li $t1, 0
    l.d $f0, ingresos($t1)   # Ingreso del mes 1 en $f0
    addi $t1, $t1, 8
    l.d $f2, ingresos($t1)   # Ingreso del mes 2 en $f2
    
    # Calcular crecimiento: ((mes2 - mes1) / mes1) * 100
    sub.d $f4, $f2, $f0      # $f4 = mes2 - mes1
    div.d $f6, $f4, $f0      # $f6 = ($f4 / mes1)
    
    li $t2, 100              # Usamos un registro entero para 100
    mtc1 $t2, $f8            # Mover 100 al registro flotante $f8
    cvt.d.w $f8, $f8         # Convertir entero a double
    mul.d $f10, $f6, $f8     # $f10 = crecimiento en %
    
    # Mostrar crecimiento
    la $a0, crec_msg
    li $v0, 4
    syscall
    
    mov.d $f12, $f10
    li $v0, 3               # Imprimir double
    syscall
    
    j pause

# Pausar el programa
pause:
    la $a0, prompt_pause
    li $v0, 4
    syscall
    
    li $v0, 8              # Leer una entrada para pausar
    syscall
    j menu_loop

# Función para terminar el programa
terminar:
    la $a0, end_msg
    li $v0, 4
    syscall
    
    li $v0, 10             # Syscall para salir
    syscall
